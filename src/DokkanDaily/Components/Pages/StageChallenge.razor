@page "/daily"
@using DokkanDaily.Components.Shared
@using DokkanDaily.Constants
@using DokkanDaily.Helpers
@using DokkanDaily.Models;
@using DokkanDaily.Models.Enums

<PageTitle>Dokkandle</PageTitle>

<style>
    body {
        background: url('images/wallpaper.jpg') fixed center no-repeat;
        background-size: cover;
        text-align: center;
        margin: 0 auto;
        overflow: hidden;
    }
</style>

<div style="max-width: fit-content;margin-left: auto;margin-right: auto;">
    <img src="images/logo/logo.png" />
    <p style="color:white;padding-left:.5em;">Today's challenge type is: @dailyType!</p>
</div>
@if(Executing)
{
    <BusySpinner />
}
else
{
    <div class="challenge-box">
        @if(dailyType == DailyType.LinkSkill)
        {
            <p class="challenge-text"><b>Challenge!</b> defeat <b>@todaysEvent.Name</b>, <b>Stage @todaysEvent.Stage</b> using only units that have the Link Skill <div class="dokkan-link-wrapper"><div class="dokkan-link"><div class="text">@linkSkill.Name</div></div></div><div class="challenge-text friend-text">(Friend Unit excluded)</div></p>
        }
        @if(dailyType == DailyType.Category)
        {
            <p class="challenge-text"><b>Challenge!</b> defeat <b>@todaysEvent.Name</b>, <b>Stage @todaysEvent.Stage</b> using only units belonging to:<br /><img style="width:auto;height:3em;" src="@category.ImageURL" /><div class="challenge-text friend-text">(Friend Unit excluded)</div></p>
        }
        @if(dailyType == DailyType.Character)
        {
            <p class="challenge-text"><b>Challenge!</b> build a team using <img style="width:3em;height:auto;" src="@todaysUnit.ImageURL" /> <b style="color:#@typeColor">[@leader.Title] @leader.Name</b> as the Leader and defeat <b>@todaysEvent.Name</b>, <b>Stage @todaysEvent.Stage</b>!</p>
        }
        @if (todaysEvent != null && todaysEvent.WallpaperImagePath != null)
        {
            <p>
                <img style="width:88%;height:20%;border:solid;" src="@todaysEvent.BannerImagePath" />
            </p>
        }
    </div>

    <footer style="position:fixed; bottom:0;">
        <p style="color:white">Time until challenge resets: @hoursToReset hour(s)</p>
    </footer>
}

@code {
    bool Executing { get; set; }

    Random Random => RNGHelper.GetDailySeed();

    DailyType dailyType { get; set; }

    Event todaysEvent { get; set; }

    LinkSkill linkSkill { get; set; }

    Category category { get; set; }

    Leader leader { get; set; }

    Unit fallback;

    Unit todaysUnit 
    { 
        get 
        { 
            if (fallback == null)
            {
                Task.Delay(100);
            }
            return fallback;
        } 
        set
        {
            fallback = value;
        }
    }

    string typeColor => DDConstants.TypeToHexMap[todaysUnit.DokkanType];

    int hoursToReset => 24 - DateTime.UtcNow.Hour;

    protected override void OnInitialized()
    {
        dailyType = RNGHelper.GetRandomDailyType(Random);
        todaysEvent = RNGHelper.GetRandomStage(Random);
        linkSkill = RNGHelper.GetRandomLinkSkill(Random, todaysEvent.Tier);
        category = RNGHelper.GetRandomCategory(Random, todaysEvent.Tier);
        leader = RNGHelper.GetRandomLeader(Random, todaysEvent.Tier);
        fallback = DDConstants.GetUnit(leader);
        base.OnInitialized();
    }

}
