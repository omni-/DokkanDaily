@page "/admin"
@rendermode InteractiveServer

@using DokkanDaily.Configuration
@using DokkanDaily.Services
@using Microsoft.AspNetCore.Components.Authorization
@using DokkanDaily.Components.Shared
@using DokkanDaily.Constants
@using DokkanDaily.Helpers
@using DokkanDaily.Models;
@using DokkanDaily.Models.ViewModel
@using DokkanDaily.Models.Enums
@using DokkanDaily.Services.Interfaces
@using Microsoft.Extensions.Options

@inject AuthenticationStateProvider authStateProvider;
@inject IRngHelperService RngSvc
@inject IAzureBlobService BlobSvc
@inject IJSRuntime JsRuntime
@inject IResetService ResetSvc
@inject ILeaderboardService LeaderboardSvc
@inject NavigationManager NavManager
@inject DiscordWebhookClient WebhookSvc
@inject IOptions<DokkanDailySettings> settings

<PageTitle>Badmin!</PageTitle>

<style>
    body {
        background: url('images/misc/wallpaper.jpg') fixed center no-repeat;
        background-size: cover;
        text-align: center;
        margin: 0 auto;
        overflow: hidden;
    }
</style>

<Logo/>
<Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
            @if (AuthorizedUser)
            {
                <div class="content" style="color:antiquewhite">
                    <h3 style="padding-top:1vh;">Welcome back, Admin.</h3>
                    <div class="settings">
                        <br />
                        <label>Set Seed: <input @bind-value=@Seed /><button style="margin-left:5px" @onclick="async () => await Exec(SetSeed)">Set</button></label>
                        <br />
                        <label>Roll Seed: <button style="margin-left:5px" @onclick="async () => await Exec(RollSeed)">Roll</button></label>
                        <br />
                        <label>Reset Seed: <button style="margin-left:5px" @onclick="async () => await Exec(Reset)">Reset</button></label>
                        <br />
                        <label>Refresh Leaderboard: <button style="margin-left:5px" @onclick="async () => await Exec(UpdateLeaderboard)">Refresh</button></label>
                        <br />
                        <label>Rerun Daily Reset: <input @bind-value=@Date /><button style="margin-left:5px" @onclick="async () => await Exec(Rerun)">Rerun Daily Reset</button></label>
                        <br />
                        <label>Set Daily Type: <input @bind-value=@DailyTypeOverride /><button style="margin-left:5px" @onclick="() => Exec(SetDailyType)">Set</button></label>
                        <br />
                        <label>Set Stage: <input @bind-value=@Stage /><button style="margin-left:5px" @onclick="async () => await Exec(SetStage)">Set</button></label>
                        <br />
                        <label>Set Unit: <input @bind-value=@Unit /><button style="margin-left:5px" @onclick="async () => await Exec(SetUnit)">Set</button></label>
                        <br />
                        <label>Set Link: <input @bind-value=@LinkSkill /><button style="margin-left:5px" @onclick="async () => await Exec(SetLinkSkill)">Set</button></label>
                        <br />
                        <label>Set Category: <input @bind-value=@Category /><button style="margin-left:5px" @onclick="async () => await Exec(SetCategory)">Set</button></label>
                        <br />
                        <label>Send Daily via Webhook: <button style="margin-left:5px" @onclick="async () => await Exec(SendWebhook)">Send</button></label>
                        <br />
                        <label>Send Announcement: <textarea @bind=@Announcement /><button style="margin-left:5px" @onclick="async () => await Exec(SendWebhookCustom)">Send</button><input style="margin-left:5px" @bind=@AddRolePing type="checkbox" /></label>
                    </div>
                    <p class="error">@ErrorText</p>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <p>Unauthorized.</p>
        </NotAuthorized>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
</Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>

<Footer />

@code {
    bool AuthorizedUser { get; set; }

    string Seed { get; set; }

    string DailyTypeOverride { get; set; }

    string Date { get; set; }

    string Announcement { get; set; }

    bool AddRolePing { get; set; } = true;

    string Stage { get; set; }

    string Category { get; set; }

    string LinkSkill { get; set; }

    string Unit { get; set; }

    string ErrorText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthorizedUser = false;

        string discordId = await authStateProvider.GetIdFromDiscordAuthClaim();

        if (discordId.IsAdministrator())
        {
            AuthorizedUser = true;
        }

        if (!AuthorizedUser) {
            NavManager.NavigateTo("/", false);
        }

        Seed = RngSvc.GetRawSeed().ToString();

        base.OnInitialized();
    }

    async Task Exec(Func<Task> f)
    {
        ErrorText = "";
        try
        {
            await f.Invoke();
        }
        catch (Exception e)
        {
            ErrorText = $"{e.GetType().Name}: {e.Message}";
        }
    }

    void Exec(Action f)
    {
        ErrorText = "";
        try
        {
            f.Invoke();
        }
        catch (Exception e)
        {
            ErrorText = $"{e.GetType().Name}: {e.Message}";
        }
    }

    async Task UpdateLeaderboard()
    {
        await LeaderboardSvc.GetCurrentLeaderboard(true);
    }

    async Task SetSeed()
    {
        await RngSvc.SetDailySeed(int.Parse(Seed));
    }

    async Task RollSeed()
    {
        await RngSvc.RollDailySeed();
        Seed = RngSvc.GetRawSeed().ToString();
    }

    async Task Reset()
    {
        await RngSvc.Reset();
        Seed = RngSvc.GetRawSeed().ToString();
    }

    async Task Rerun()
    {
        if (!int.TryParse(Date, out int result))
            await ResetSvc.DoReset(1, true);
        else
            await ResetSvc.DoReset(result, true);
    }

    void SetDailyType()
    {
        RngSvc.OverrideChallengeType(Enum.Parse<DailyType>(DailyTypeOverride));
    }

    async Task SetStage()
    {
        var sp = Stage?.Trim()?.Split(", Stage ");
        var chall = await RngSvc.GetDailyChallenge();
        RngSvc.OverrideChallenge(chall.DailyType, DokkanConstants.Stages.First(x => x.Name == sp?.FirstOrDefault() && x.StageNumber == int.Parse(sp?.Skip(1)?.FirstOrDefault())), chall.LinkSkill, chall.Category, chall.Leader);
    }

    async Task SetUnit()
    {
        var sp = Unit?.Trim()?.Split("] ");

        var chall = await RngSvc.GetDailyChallenge();
        RngSvc.OverrideChallenge(DailyType.Character, chall.TodaysEvent, chall.LinkSkill, chall.Category, DokkanConstants.Leaders.First(x => x.Name == sp?.Skip(1)?.FirstOrDefault() && x.Title == sp?.FirstOrDefault()?.Replace("[", "")));
    }

    async Task SetLinkSkill()
    {
        var chall = await RngSvc.GetDailyChallenge();
        RngSvc.OverrideChallenge(DailyType.LinkSkill, chall.TodaysEvent, DokkanConstants.LinkSkillMap[LinkSkill?.Trim()], chall.Category, chall.Leader);
    }

    async Task SetCategory()
    {
        var chall = await RngSvc.GetDailyChallenge();
        RngSvc.OverrideChallenge(DailyType.Category, chall.TodaysEvent, chall.LinkSkill, DokkanConstants.CategoryMap[Category?.Trim()], chall.Leader);
    }

    async Task SendWebhook()
    {
        var chall = await RngSvc.GetDailyChallenge();
        await WebhookSvc.PostAsync(chall.ToWebhookPayload());
    }

    async Task SendWebhookCustom()
    {
        await WebhookSvc.PostAsync(AddRolePing ? Announcement.AddDokkandleDbcRolePing() : Announcement);
    }
}
