@page "/clears"
@rendermode InteractiveServer

@using DokkanDaily.Components.Shared
@using DokkanDaily.Constants
@using DokkanDaily.Extensions
@using DokkanDaily.Helpers
@using DokkanDaily.Models
@using DokkanDaily.Models.ViewModel
@using DokkanDaily.Services.Interfaces
@using Microsoft.AspNetCore.Components.Authorization

@inject IAzureBlobService BlobSvc
@inject IJSRuntime jsRuntime
@inject IRngHelperService RngSvc
@inject AuthenticationStateProvider authStateProvider;
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Dokkandle!</PageTitle>
<style>
    body {
    background: url('images/misc/wallpaper.jpg') fixed center no-repeat;
    background-size: cover;
    text-align: center;
    margin: 0 auto;
    overflow: hidden;
    }
</style>
<div style="height:100vh;">

    <Logo dailyType="@RngSvc.GetTodaysDailyType()?.ToString()" />

    @if (warningMessage.Length > 0)
    {
        <div class="alert alert-warning">
            <strong>Error!</strong> @warningMessage.
        </div>
    }
    <div class="container clear-box text-center">
        <div style="padding-top:2vh;" class="row">
            <div>
                <label>
                    <InputFile class="form-control" disabled="@fileLoading" accept=".jpg,.jpeg,.png,.webp,.avif" style="width:100%;" OnChange="@OnInputFileChange" single />
                </label>
                @if (fileLoading)
                {
                    <i class="fa fa-refresh"></i> <span>Loading...</span>
                }
            </div>
            <div style="padding-top:1vh;">
                <button type="button" disabled="@fileLoading" class="btn btn-secondary btn-md" @onclick="OnUploadSubmit">
                    Upload File
                </button>
            </div>
        </div>
        @if (displayMessage.Length > 0)
        {
            <div class="alert alert-success">
                <strong>Success!</strong> @displayMessage.
            </div>
        }
        <br />
        <div class="uploads">
            @if (fileUploadViewModels.Count > 0)
            {
                @foreach (var attachment in fileUploadViewModels)
                {
                    <div class="card">
                        <img style="object-fit: cover;" src="@GetImgPath(attachment)" @onclick="() => OnFileViewClick(attachment)" />
                        @*                         @if (@attachment.Tags.GetTagValueOrDefault(DDConstants.USER_NAME_TAG) != null)
                        {
                            <div class="container">
                                <h4><b>@attachment.Tags.GetTagValueOrDefault(DDConstants.USER_NAME_TAG)</b></h4>
                            </div>
                        } *@
                    </div>
                }
            }
            else
            {
                <p style="margin-top:25vh;">No clears yet!</p>
            }
        </div>
        <p class="italic">Note: leaderboard points will be accrued as follows: 1 for submitting a clear, 1 for not using items or Support Memories, and 1 for having the fastest clear of the day.</p>
    </div>
</div>

<Footer />

@code {
    private string warningMessage = "";
    private string displayMessage = "";
    private List<IBrowserFile> loadedFiles = new();
    private bool fileLoading;
    private string Message = "No file(s) selected";
    private IReadOnlyList<IBrowserFile> selectedFiles = [];
    private List<FileUploadViewModel> fileUploadViewModels = [];
    private const string defaultWarning = "Something went wrong! Please try again.";
    private Challenge challengeModel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            challengeModel = await RngSvc.GetDailyChallenge();

            fileUploadViewModels = await Task.Run(async () =>
            {
                List<FileUploadViewModel> ret = [];
                string tag = DokkanDailyHelper.GetUtcNowDateTag();
                var result = await BlobSvc.GetFilesForTag(tag);
                foreach (var f in result)
                {
                    var tags = await f.GetTagsAsync();
                    var metadata = await f.GetPropertiesAsync();

                    if (metadata.Value.Metadata.TryGetValue(AzureConstants.INVALID_TAG, out string invalid)) //only display valid clears
                    {
                        _ = bool.TryParse(invalid, out bool invalidResult);
                        if (invalidResult) continue;
                    }

                    ret.Add(new()
                    {
                        FileName = f.Name,
                        FileStorageUrl = f.Uri.ToString(),
                        Tags = tags.Value.Tags.Concat(metadata.Value.Metadata).ToDictionary()
                    });
                }
                return ret;
            }).ConfigureAwait(false);
        }
        catch { }
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void OnUploadSubmit()
    {
        string remoteUserAgent = null;

        try { remoteUserAgent = await jsRuntime.InvokeAsync<string>("getUserAgent"); } catch { }

        string discordUsername = await authStateProvider.GetUsernameFromDiscordAuthClaim();
        string discordId = await authStateProvider.GetIdFromDiscordAuthClaim();

        var file = selectedFiles.FirstOrDefault();
        if (file == null) return;

        List<string> allowedFileTypes = [".jpg", ".jpeg", ".png", ".webp", ".avif"];
        if (!allowedFileTypes.Contains(Path.GetExtension(file.Name)))
        {
            warningMessage = $"Unsupported file type! Supported filetypes are {string.Join(',', allowedFileTypes)}";
            selectedFiles = [];
            return;
        }

        fileLoading = true;
        this.StateHasChanged();

        try
        {
            var blobClient = await BlobSvc.UploadToAzureAsync(
                file.Name,
                file.ContentType,
                file, challengeModel,
                userAgent: remoteUserAgent,
                discordUsername: discordUsername,
                discordId: discordId,
                remoteIp: HttpContextAccessor?.HttpContext?.GetUserIpAddress());

            FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
            {
                FileName = blobClient.Name,
                FileStorageUrl = blobClient.Uri.ToString(),
                ContentType = file.ContentType
            };

            fileUploadViewModels.Add(fileUploadViewModel);
            Message = file.Name + " Uploaded!!";
        }
        catch (Exception ex)
        {
            warningMessage = ex.Message;
        }

        fileLoading = false;
        this.StateHasChanged();
    }

    private string GetImgPath(FileUploadViewModel attachment)
    {
        var sasToken = BlobSvc.GetBlobSasTokenByFile(attachment.FileName);

        return attachment?.FileStorageUrl?.AddSasTokenToUri(sasToken);
    }

    private async void OnFileViewClick(FileUploadViewModel attachment)
    {
        try
        {
            var sasToken = BlobSvc.GetBlobSasTokenByFile(attachment.FileName);
            if (sasToken != null)
            {
                string fileUrl = attachment.FileStorageUrl + "?" + sasToken;
                await jsRuntime.InvokeVoidAsync("open", fileUrl, "_blank");
            }

        }
        catch (Exception ex)
        {
            warningMessage = ex.Message;
        }

        this.StateHasChanged();
    }
}