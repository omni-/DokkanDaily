@page "/admin"
@rendermode InteractiveServer

@using DokkanDaily.Configuration
@using DokkanDaily.Services
@using Microsoft.AspNetCore.Components.Authorization
@using DokkanDaily.Components.Shared
@using DokkanDaily.Constants
@using DokkanDaily.Helpers
@using DokkanDaily.Models;
@using DokkanDaily.Models.ViewModel
@using DokkanDaily.Models.Enums
@using DokkanDaily.Services.Interfaces
@using Microsoft.Extensions.Options
@using System.Reflection

@inject AuthenticationStateProvider authStateProvider;
@inject IRngHelperService RngSvc
@inject IAzureBlobService BlobSvc
@inject IJSRuntime JsRuntime
@inject IResetService ResetSvc
@inject NavigationManager NavManager
@inject DiscordWebhookClient WebhookSvc
@inject IOptions<DokkanDailySettings> settings

<PageTitle>Badmin!</PageTitle>

<style>
    body {
        background: url('images/misc/wallpaper.jpg') fixed center no-repeat;
        background-size: cover;
        text-align: center;
        margin: 0 auto;
        overflow: hidden;
    }
</style>

<Logo/>
<Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>
    <Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
        <Authorized>
            @if (AuthorizedUser)
            {
                <div class="content" style="color:antiquewhite">
                    <h3 style="padding-top:1vh;">Welcome back, Admin.</h3>
                    <div class="settings">
                        <br />
                        <label>Current Seed: <input @bind=@CurrentSeed /></label>
                        <br />
                        <label>Set Seed: <input @bind-value=@Seed /><button style="margin-left:5px" @onclick=SetSeed>Set</button></label>
                        <br />
                        <label>Roll Seed: <button style="margin-left:5px" @onclick=RollSeed>Roll</button></label>
                        <br />
                        <label>Reset Seed: <button style="margin-left:5px" @onclick=Reset>Reset</button></label>
                        <br />
                        <label>Rerun Daily Reset: <input @bind-value=@Date /><button style="margin-left:5px" @onclick=Rerun>Rerun Daily Reset</button></label>
                        <br />
                        <label>Set Daily Type: <input @bind-value=@DailyType /><button style="margin-left:5px" @onclick=SetDailyType>Set</button></label>
@*                         <br />
                        <label>Set Stage: <input @bind-value=@DailyType /><button style="margin-left:5px" @onclick=SetStage>Set</button></label>
                        <br />
                        <label>Set Unit: <input @bind-value=@DailyType /><button style="margin-left:5px" @onclick=SetUnit>Set</button></label>
                        <br />
                        <label>Set Link: <input @bind-value=@DailyType /><button style="margin-left:5px" @onclick=SetLinkSkill>Set</button></label>
                        <br />
                        <label>Set Category: <input @bind-value=@DailyType /><button style="margin-left:5px" @onclick=SetDailyType>Set</button></label> *@
                        <br />
                        <label>Send Daily via Webhook: <button style="margin-left:5px" @onclick=SendWebhook>Send</button></label>
                        <br />
                        <label>Send Announcement: <textarea @bind=@Announcement /><button style="margin-left:5px" @onclick=SendWebhookCustom>Send</button><input style="margin-left:5px" @bind=@AddRolePing type="checkbox" /></label>
                    </div>
                </div>
            }
        </Authorized>
        <NotAuthorized>
            <p>Unauthorized.</p>
        </NotAuthorized>
    </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
</Microsoft.AspNetCore.Components.Authorization.CascadingAuthenticationState>

<Footer />

@code {
    bool AuthorizedUser { get; set; }

    string Seed { get; set; }

    string CurrentSeed { get => RngSvc.GetRawSeed().ToString(); set => _ = value; }

    string DailyType { get; set; }

    string Date { get; set; }

    string Announcement { get; set; }

    bool AddRolePing { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        AuthorizedUser = false;

        if (user.Claims.Any()) 
        {
            var claim = user.Claims.FirstOrDefault(c => c.Issuer == "Discord" && c.Type.Contains("identifier"));

            if (claim.Value == "263499818234675200" || claim.Value == "112089455933792256")
            {
                AuthorizedUser = true;
            }
        } 

        if (!AuthorizedUser) {
            NavManager.NavigateTo("/", false);
        }

        base.OnInitialized();
    }

    async Task SetSeed()
    {
        await RngSvc.SetDailySeed(int.Parse(Seed));
    }

    async Task RollSeed()
    {
        await RngSvc.RollDailySeed();
    }

    async Task Reset()
    {
        await RngSvc.Reset();
    }

    void Rerun()
    {
        if (!int.TryParse(Date, out int result))
            ResetSvc.DoReset(1, true);
        else
            ResetSvc.DoReset(result, true);
    }

    void SetDailyType()
    {
        RngSvc.OverrideChallengeType(Enum.Parse<DailyType>(DailyType));
    }

    void SetStage()
    {

    }

    void SetUnit()
    {

    }

    void SetLinkSkill()
    {

    }

    void SetCategory()
    {

    }

    async Task SendWebhook()
    {
        var chall = await RngSvc.GetDailyChallenge();
        await WebhookSvc.PostAsync(chall.ToWebhookPayload());
    }

    async Task SendWebhookCustom()
    {
        string addText = AddRolePing ? $"\r\n{InternalConstants.DokkandleDbcRole}" : "";
        await WebhookSvc.PostAsync($"{Announcement}{addText}");
    }
}
