@page "/leaderboard"
@rendermode InteractiveServer

@using DokkanDaily.Components.Shared
@using DokkanDaily.Models
@using DokkanDaily.Services.Interfaces
@using DokkanDaily.Helpers;

@inject ILeaderboardService LeaderboardSvc;
@inject IRngHelperService RngSvc;

<PageTitle>Dokkandle!</PageTitle>

<style>
    body {
        background: url('images/misc/wallpaper.jpg') fixed center no-repeat;
        background-size: cover;
        text-align: center;
        margin: 0 auto;
        overflow: hidden;
    }
</style>

<Logo dailyType="@RngSvc.GetTodaysDailyType()?.ToString()" />

<div class="container leaderboard text-center">
    @if (leaderboard != null)
    {
        <i style="float:left" @onclick="decSeason" hidden="@leftArrowHidden" class="arrow oi oi-chevron-left"></i>
        <i style="float:right" @onclick="incSeason" hidden="@rightArrowHidden" class="arrow oi oi-chevron-right"></i>
        <h3>@currentStandingsText</h3>
        <p class="note">@bonusText</p>
        @for (int i = 1; i < leaderboard.Count + 1; i++)
        {
            <p>@i. @leaderboard[i - 1].GetDisplayName() - @leaderboard[i - 1].TotalScore points</p>
        }
    }
    else
    {
        <p>@displayText</p>
    }
</div>

<Footer />

@code {
    List<LeaderboardUser> leaderboard;

    string displayText => string.IsNullOrEmpty(errorText) ? "Sorry, there's nothing here yet!" : errorText;
    string errorText;

    async void incSeason()
    {
        if (selectedSeason == currentSeason) return;
        selectedSeason++;
        leaderboard = await LeaderboardSvc.GetLeaderboardBySeason(selectedSeason);
        StateHasChanged();
    }
    async void decSeason()
    {
        if (selectedSeason == 0) return;
        selectedSeason--;
        leaderboard = await LeaderboardSvc.GetLeaderboardBySeason(selectedSeason);
        StateHasChanged();
    }

    int currentSeason = 0;
    int selectedSeason = 0;
    bool leftArrowHidden => selectedSeason <= 0;
    bool rightArrowHidden => selectedSeason >= currentSeason;
    string currentStandingsText => selectedSeason == 0 ? "Hall of Fame" : selectedSeason == currentSeason ? $"Current Standings (Season {selectedSeason})" : $"Season {selectedSeason}";
    string bonusText => selectedSeason == 0 ? "Points from clears submitted prior to the implementation of the Season system" : string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            leaderboard = await LeaderboardSvc.GetDailyLeaderboard();
            currentSeason = LeaderboardSvc.GetCurrentSeason();
            selectedSeason = currentSeason;
        }
        catch(Exception e) { errorText = e.Message; }
    }
}
